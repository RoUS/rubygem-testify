#! @PERL@ -w
#
# Testify v@PACKAGE_VERSION@
#
# ====================================================================
# Copyright 2005 Ken Coar
# All rights reserved.
#
# The use and distribution of this code or document is
# governed by version 2.0 of the Apache licence, which may
# be found online at
#  <URL:http://www.apache.org/licenses/LICENSE-2.0>.
# There should also be a copy accompanying this package, in
# a file named LICENCE.
#
# $Id: testify.in,v 1.2 2007/07/30 02:17:09 coar Exp $
#

use strict;
use Carp;
use Config;
use Data::Dumper;
use Expect;
use Getopt::Long;
use IO::Handle;
use IO::Tty;
use IPC::Open2;
use POSIX qw( :sys_wait_h );
use Symbol;
use Term::ReadLine;

use lib 'pmods/';
use Command;
use Filter;
use L10n;
use TCfg;

my $VERSION = '@PACKAGE_VERSION@';

my $signal;
my @signames = split(/\s+/, $Config{sig_name});
my @signums = split(/\s+/, $Config{sig_num});
for (my $index = 0; $index < @signames; $index++) {
    $signal->{$signames[$index]} = $signums[$index];
    $signal->{$signums[$index]} = $signames[$index];
}

Getopt::Long::Configure qw( bundling require_order pass_through );

my $o_help;
my %options;

#
# Global options
#
GetOptions(\%options,
           'help'             => \$o_help,
          );


my $term = new Term::ReadLine('Testify');
my $localiser = new L10n;
my $cfg = new TCfg('testify.cfg');
my $dispatcher = new Command(localiser => $localiser, config => $cfg);

my $finished = 0;
my $command;
my $estatus = 0;
my $cmdline;
my $one_command;

if ($one_command = @ARGV) {
    $cmdline = $dispatcher->assemble_safely(@ARGV);
}

while (! $finished) {
    if (! $one_command) {
        $cmdline = $term->readline('testify> ');
    }
    else {
        $finished = 1;
    }
    if (! defined($cmdline)) {
        print "\n" if (! $one_command);
        last;
    }

    $term->addhistory($cmdline);

    $dispatcher->parse($cmdline);
    $command = $dispatcher->verb();
    if ($command =~ /^(?:(?:good)?bye|exit|quit)$/) {
        $finished = 1;
        last;
    }

    my $fh = gensym();
    my $filter_input = gensym();
    my $filter_output = gensym();

    if ($command =~ /^run filter/) {
        my $filter_name = $ARGV[0];
        croak($localiser->lookup('_nofilterspec')) if (! $filter_name);
        my $filter = new Filter(Name => $filter_name, ReadLines => 'all');
        print Dumper($filter);
        $filter->export(\*STDOUT);
        my $output = $filter->run() || 'undef';
        print "<<$output>>\n";
        print '>>' . $filter->run('input!') . "<<\n";
    }
}

exit($dispatcher->{status});

#
# Local Variables:
# mode: cperl
# tab-width: 4
# indent-tabs-mode: nil
# c-basic-offset: 4
# End:
#
